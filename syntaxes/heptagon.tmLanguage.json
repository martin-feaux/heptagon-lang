{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Heptagon",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#node"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#types"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"comment" : {
			"patterns": [
				{
					"name" : "comment.block.heptagon",
					"comment": "multi_line comment",
					"begin": "\\(\\*",
					"end" : "\\*\\)"
				}
			]
		},
		"punctuation" : {
			"patterns": [
				{
					"name" : "punctuation.terminator.statement.heptagon",
					"comment" : "end of line",
					"match": ";"
				}
			]
		},
		"node" : {
			"patterns": [
				{
					"comment" : "node a.k.a function",
					"match": "\\b(node|fun)[ \t]+([a-zA-Z][a-zA-Z0-9_]*)[ \t]*\\((([a-z][a-zA-Z0-9_]*|[ \t]*|,)*[ \t]*:[ \t]*([a-z][a-zA-Z0-9_]*))*\\)[ \t]*(returns)[ \t]*\\((([a-z][a-zA-Z0-9_]*|[ \t]*|,)*[ \t]*:[ \t]*([a-z][a-zA-Z0-9_]*))*\\)",
					"captures": {
						"1" : {"name" : "keyword.other.heptagon"},
						"2" : {"name" : "entity.name.function.heptagon"},
						"3" : {"name" : "variable.paramater.heptagon"},
						"5" : {"name" : "storage.type.heptagon"},
						"6" : {"name" : "keyword.other.heptagon"},
						"7" : {"name" : "variable.parameter.heptagon"},
						"9" : {"name" : "storage.type.heptagon"}
					}
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.other.heptagon",
					"comment" : "other keyword",
					"match": "\\b(node|fun|returns|let|tel|type|var|const|contract|assume|enforce|present|last|automaton|state|unless|do|end)\\b"
				},
				{
					"name" : "keyword.control",
					"comment" : "control keyword",
					"match" : "\\b(if|then|else|map|mapi|fold|foldi|when|whenot|switch|pre|fby|reset|every|merge|->)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name" : "keyword.operator.logical.heptagon",
					"comment" : "logical operator",
					"match" : "\\b(and|or|not)\\b"
				},
				{
					"name" : "keyword.operator.arithmetic.heptagon",
					"comment" : "arithmetic operator",
					"match": "[+-/*.]"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name" : "storage.type.built-in.heptagon",
					"comment": "built-in type",
					"match": "\\b(int|float|bool)\\b"
				},
				{
					"name" : "storage.modifier.heptagon",
					"comment" : "modifier",
					"match" : "const"
				}
			]
		},
		"constants" : {
			"patterns": [
				{
					"name" : "constant.language.heptagon",
					"match" : "\\b(false|true)\\b"
				},
				{
					"name" : "constant.numeric.heptagon",
					"match": "\\b[0-9]+\\.?[0-9]*"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.heptagon",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.heptagon",
					"match": "\\\\."
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"comment" : "call to node",
					"begin" : "([a-z][a-zA-Z0-9_]*)[ \t]*\\(",
					"end" : "\\)",
					"patterns": [
						{"include": "$self"}
					],
					"beginCaptures": {
						"1" : {"name" : "entity.name.function.heptagon"}
					}
				},
				{
					"name" : "variable.other.heptagon",
					"comment": "variable name",
					"match" : "[a-z][a-zA-Z0-9_]*"
				}
			]
		}
	},
	"scopeName": "source.heptagon"
}